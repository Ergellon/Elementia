window.VKUnity = 
{
    init: function(isPlayer, appId, status, useJsButtons) 
	{				
        // make element for js sdk
        VKUnity.isPlayer = isPlayer;
        VKUnity.useJsButtons = useJsButtons;
        
        if(!document.getElementById('vk_api_transport')) 
		{
            var vkroot = document.createElement('div');
            vkroot.id = 'vk_api_transport';
            var body = document.getElementsByTagName('body')[0];
            body.insertBefore(vkroot, body.children[0]);
        }

		// once jssdk is loaded, init
        window.vkAsyncInit = function () 
		{
            VK.init({apiId : appId,
            status : status}); 	
		}; 

		setTimeout(function() 
		{
			var el = document.createElement("script");
			el.type = "text/javascript";
			el.src = "//vk.com/js/api/openapi.js";
			el.async = true;
			document.getElementById("vk_api_transport").appendChild(el);
		}, 0); 
		
		 
    },    
    
    login: function(settings) 
	{		
		VKUnity.setOnClick(function() 
	 	{	    
       		VK.Auth.login(function(response)
			{
				if (response.session) 
				{				
					VKUnity.sendMessage('OnLoginComplete', JSON.stringify(response));
				}
			}, settings);  
		});
    },
    
    logout: function() 
	{			    
       VK.Auth.logout(function()
       {
			VKUnity.sendMessage('OnLogoutComplete', '');       
       });  
    },
    
    call: function(callback_id, method, params, needConfirm)
    {
    	var paramJson = JSON.parse(params);  
    	var func =  function(){ 	
	    	VK.Api.call(method, paramJson,
	    	 function(responce)
	    	 {
				VKUnity.VKcallback(callback_id, 'OnCallComplete', JSON.stringify(responce));								    	 
	    	 });
	 	};
	 	
	 	if (needConfirm)
	 	{
	 		VKUnity.setOnClick(func);
	 	}
	 	else
	 	{
	 		func();
	 	}
    },
    
    sendMessage: function(method, param) {
        if (!VKUnity.isPlayer) {
            SendMessage('VKProvider', method, param);
        } else {
            u.getUnity().SendMessage('VKProvider', method, param);
        }
    },
    
    setOnClick: function (func)
    {
    	if (VKUnity.useJsButtons && !VKUnity.isPlayer)
		{
			var link = document.getElementById('canvas');
			link.onclick = func;
		}
		else
		{
			func();
		}
    },
    
    VKcallback: function(callback_id, callbackMethodName, response) {
    	response = {'callback_id': callback_id, 'response': response};
    	VKUnity.sendMessage(callbackMethodName, JSON.stringify(response));
    }
};